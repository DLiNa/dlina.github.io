<!DOCTYPE html>
<meta charset="utf-8">
<style>

text {
  font: 10px sans-serif;
}

line {
  stroke: #000;
  stroke-width: 1.5px;
}

circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

</style>

<style>
      .link {
      stroke: #ccc;
      }
      .gnode text {
      pointer-events: none;
      font-size: 12pt;
      font-family: "Ubuntu Light", monospace;
      font-weight: lighter;
      /*text-transform: lowercase;*/
      stroke-width: initial;
      }
      .background {
        fill: #eee;
      }
      line {
        stroke: #fff;
      }
      text.active {
        fill: red;
      }
  </style>

<body>
<div id="option">
    <input name="updateButton" 
           type="button" 
           value="Update" 
           onclick="updateData()" />
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
<script>

var width = 960,
    height = 500;

var n = 200,
    nodes = [
{"name":"KRAWUTSCHKE","group":5,"group1":1, "weight":100},
{"name":"LEHMANN","group":5,"group1":1, "weight":100},
{"name":"LUDE","group":5,"group1":1, "weight":100},
{"name":"BULLE","group":5,"group1":1, "weight":100},
{"name":"ABRAMSEN","group":5,"group1":1, "weight":100},
{"name":"MIEZE","group":5,"group1":1, "weight":100},
{"name":"HENRIETTE MARSCHALL","group":5,"group1":1, "weight":100},
{"name":"HENRIETTE","group":5,"group1":1, "weight":100},
{"name":"ANGLER","group":5,"group1":1, "weight":100},
{"name":"HELENE","group":5,"group1":1, "weight":100},
{"name":"LEHMANNS STIMME","group":5,"group1":1, "weight":100},
{"name":"DER HERR","group":5,"group1":2, "weight":100},
{"name":"RUFE VON ALLEN SEITEN","group":5,"group1":2, "weight":100},
{"name":"RUFE VON DER GALERIE","group":5,"group1":2, "weight":100},
{"name":"EIN VORSTANDSMITGLIED DER FREIEN BÃœHNE","group":5,"group1":2, "weight":100},
{"name":"DAS VORSTANDSMITGLIED","group":5,"group1":2, "weight":100},
{"name":"EIN ANDERES VORSTANDSMITGLIED","group":5,"group1":2, "weight":100},
{"name":"DAS ERSTE VORSTANDSMITGLIED","group":5,"group1":2, "weight":100},
{"name":"RUFE","group":5,"group1":2, "weight":100},
{"name":"MORPHY","group":5,"group1":3, "weight":100}
],
links = [
{"source":0,"target":1,"value":4},
{"source":0,"target":2,"value":1},
{"source":0,"target":3,"value":1},
{"source":0,"target":4,"value":1},
{"source":0,"target":5,"value":4},
{"source":0,"target":6,"value":1},
{"source":0,"target":7,"value":4},
{"source":0,"target":8,"value":4},
{"source":0,"target":9,"value":4},
{"source":0,"target":10,"value":1},
{"source":0,"target":1,"value":4},
{"source":0,"target":7,"value":4},
{"source":0,"target":5,"value":4},
{"source":0,"target":9,"value":4},
{"source":0,"target":19,"value":1},
{"source":0,"target":8,"value":4},
{"source":1,"target":2,"value":1},
{"source":1,"target":3,"value":1},
{"source":1,"target":4,"value":1},
{"source":1,"target":5,"value":4},
{"source":1,"target":6,"value":1},
{"source":1,"target":7,"value":4},
{"source":1,"target":8,"value":4},
{"source":1,"target":9,"value":4},
{"source":1,"target":10,"value":1},
{"source":1,"target":7,"value":4},
{"source":1,"target":5,"value":4},
{"source":1,"target":9,"value":4},
{"source":1,"target":19,"value":1},
{"source":1,"target":8,"value":4},
{"source":2,"target":3,"value":1},
{"source":2,"target":4,"value":1},
{"source":2,"target":5,"value":1},
{"source":2,"target":6,"value":1},
{"source":2,"target":7,"value":1},
{"source":2,"target":8,"value":1},
{"source":2,"target":9,"value":1},
{"source":2,"target":10,"value":1},
{"source":3,"target":4,"value":1},
{"source":3,"target":5,"value":1},
{"source":3,"target":6,"value":1},
{"source":3,"target":7,"value":1},
{"source":3,"target":8,"value":1},
{"source":3,"target":9,"value":1},
{"source":3,"target":10,"value":1},
{"source":4,"target":5,"value":1},
{"source":4,"target":6,"value":1},
{"source":4,"target":7,"value":1},
{"source":4,"target":8,"value":1},
{"source":4,"target":9,"value":1},
{"source":4,"target":10,"value":1},
{"source":5,"target":6,"value":1},
{"source":5,"target":7,"value":4},
{"source":5,"target":8,"value":4},
{"source":5,"target":9,"value":4},
{"source":5,"target":10,"value":1},
{"source":5,"target":7,"value":4},
{"source":5,"target":9,"value":4},
{"source":5,"target":19,"value":1},
{"source":5,"target":8,"value":4},
{"source":6,"target":7,"value":1},
{"source":6,"target":8,"value":1},
{"source":6,"target":9,"value":1},
{"source":6,"target":10,"value":1},
{"source":7,"target":8,"value":4},
{"source":7,"target":9,"value":4},
{"source":7,"target":10,"value":1},
{"source":7,"target":9,"value":4},
{"source":7,"target":19,"value":1},
{"source":7,"target":8,"value":4},
{"source":8,"target":9,"value":4},
{"source":8,"target":10,"value":1},
{"source":8,"target":9,"value":4},
{"source":8,"target":19,"value":1},
{"source":9,"target":10,"value":1},
{"source":9,"target":19,"value":1},
{"source":11,"target":12,"value":1},
{"source":11,"target":13,"value":1},
{"source":11,"target":14,"value":1},
{"source":11,"target":15,"value":4},
{"source":11,"target":16,"value":1},
{"source":11,"target":17,"value":1},
{"source":11,"target":18,"value":4},
{"source":11,"target":18,"value":4},
{"source":11,"target":15,"value":4},
{"source":12,"target":13,"value":1},
{"source":12,"target":14,"value":1},
{"source":12,"target":15,"value":1},
{"source":12,"target":16,"value":1},
{"source":12,"target":17,"value":1},
{"source":12,"target":18,"value":1},
{"source":13,"target":14,"value":1},
{"source":13,"target":15,"value":1},
{"source":13,"target":16,"value":1},
{"source":13,"target":17,"value":1},
{"source":13,"target":18,"value":1},
{"source":14,"target":15,"value":1},
{"source":14,"target":16,"value":1},
{"source":14,"target":17,"value":1},
{"source":14,"target":18,"value":1},
{"source":15,"target":16,"value":1},
{"source":15,"target":17,"value":1},
{"source":15,"target":18,"value":4},
{"source":15,"target":18,"value":4},
{"source":16,"target":17,"value":1},
{"source":16,"target":18,"value":1},
{"source":17,"target":18,"value":1}
];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
.linkDistance(170)
.charge(-20)
.gravity(.01)
    .size([width, height]);

var color = d3.scale.category20();
var svg = d3.select("body").append("svg")
    .attr("id", "net")
    .attr("width", width)
    .attr("height", height);

var loading = svg.append("text")
    .attr("x", width / 2)
    .attr("y", height / 2)
    .attr("dy", ".35em")
    .style("text-anchor", "middle")
    .text("Simulating. One moment please…");

// Use a timeout to allow the rest of the page to load first.
setTimeout(function() {

  // Run the layout a fixed number of times.
  // The ideal number of times scales with graph complexity.
  // Of course, don't run too long—you'll hang the page!
  force.start();
  for (var i = n * n; i > 0; --i) force.tick();
  force.stop();

 var link = svg.selectAll(".link")
      .data(links)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });


  var gnodes = svg.selectAll('g.gnode')
     .data(nodes)
     .enter()
     .append('g')
     .classed('gnode', true);
    
  var node = gnodes.append("circle")
      .attr("class", "node")
      .attr("r", function(d) { return Math.sqrt(d.weight) + 5 })
      .style("fill", function(d) { return color(d.group); });

  var labels = gnodes.append("text")
      .text(function(d) { return d.name; });


  svg.selectAll("line")
      .data(links)
    .enter().append("line")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  svg.selectAll("circle")
      .data(nodes)
    .enter().append("circle")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return Math.sqrt(d.weight) + 5 })
      .style("fill", function(d) { return color(d.group); });

 force.on("end", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    gnodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
    });
  })

  loading.remove();
}, 10);
// ** RELOAD
function updateData() {
d3.selectAll("svg").remove();
nodes = [];
links = [];
var n = 200;


var svg = d3.select("body").append("svg")
    .attr("id", "net")
    .attr("width", width)
    .attr("height", height);

var loading = svg.append("text")
    .attr("x", width / 2)
    .attr("y", height / 2)
    .attr("dy", ".35em")
    .style("text-anchor", "middle")
    .text("Simulating. One moment please…");

d3.json("/data/Alberti-Im_Suff-1890.json", function(error, graph) {
var force = d3.layout.force()
    .nodes(graph.nodes)
    .links(graph.links)
.linkDistance(170)
.charge(-20)
.gravity(.01)
    .size([width, height]);

var color = d3.scale.category20();



// Use a timeout to allow the rest of the page to load first.
setTimeout(function() {

  // Run the layout a fixed number of times.
  // The ideal number of times scales with graph complexity.
  // Of course, don't run too long—you'll hang the page!
  force.start();
  for (var i = n * n; i > 0; --i) force.tick();
  force.stop();

 var link = svg.selectAll(".link")
      .data(graph.links)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });


  var gnodes = svg.selectAll('g.gnode')
     .data(graph.nodes)
     .enter()
     .append('g')
     .classed('gnode', true);
    
  var node = gnodes.append("circle")
      .attr("class", "node")
      .attr("r", function(d) { return Math.sqrt(d.weight) + 5 })
      .style("fill", function(d) { return color(d.group); });

  var labels = gnodes.append("text")
      .text(function(d) { return d.name; });


  svg.selectAll("line")
      .data(graph.links)
    .enter().append("line")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  svg.selectAll("circle")
      .data(graph.nodes)
    .enter().append("circle")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return Math.sqrt(d.weight) + 5 })
      .style("fill", function(d) { return color(d.group); });

 force.on("end", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    gnodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
    });
  })

  loading.remove();
}, 10);
});
}


</script>
