<div class="row">
  <div class="medium-9 columns"><div id="network"></div></div>
  <div class="medium-3 columns end"><div class="col-md-3">
                <p>The colors indicate the gender of a speaker:<ul style="list-style:none;">
                    <li>
                            <svg width="10" height="10">
                                <circle class="node" cx="5" cy="5" r="5" style="fill: rgb(255, 127, 14);"></circle>
                            </svg> female</li>
                    <li>
                            <svg width="10" height="10">
                                <circle class="node" cx="5" cy="5" r="5" style="fill: rgb(174, 199, 232);"></circle>
                            </svg> male</li>
                    <li>
                            <svg width="10" height="10">
                                <circle class="node" cx="5" cy="5" r="5" style="fill: rgb(31, 119, 180);"></circle>
                            </svg> undefined</li>
                </ul>
                </p>
            </div></div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
<script>                
var width = 960,
    height = 600;

var color = d3.scale.category10();


  

var svg = d3.select("#network").append("svg")
    .attr("width", width)
    .attr("height", height);

var loading = svg.append("text")
    .attr("x", width / 2)
    .attr("y", height / 2)
    .attr("dy", ".35em")
    .style("text-anchor", "middle")
    .text("One moment pleaseâ€¦");



d3.json("/data/{{ page.networkdata }}", function(error, graph) {
var n = 100;
var force = d3.layout.force()
    .nodes(graph.nodes)
      .links(graph.links)
  	.charge(-20)
    .linkDistance(400)
    .size([width, height]);  
setTimeout(function() {
force      
      .start();
	for (var i = n * n; i > 0; --i) force.tick(function { on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });  });

  var link = svg.selectAll(".link")
      .data(graph.links)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });

  var gnodes = svg.selectAll('g.gnode')
     .data(graph.nodes)
     .enter()
     .append('g')
     .classed('gnode', true);
    
  var node = gnodes.append("circle")
      .attr("class", "node")
      .attr("r", function(d) { return Math.sqrt(d.weight) + 5 })
      .style("fill", function(d) { return color(d.group); })
      .call(force.drag);

  var labels = gnodes.append("text")
      .text(function(d) { return d.name; });
    
 

    gnodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
    });
  })

	force.stop();




  loading.remove();
}, 10);




});

</script>
